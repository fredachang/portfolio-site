/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 Zipv2.glb --transform -types
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useGesture } from "@use-gesture/react";
import { useThree } from "@react-three/fiber";
import { animated, useSpring } from "@react-spring/three";
import { useEffect, useState } from "react";

type GLTFResult = GLTF & {
  nodes: {
    zip_base: THREE.Mesh;
    zip_hook: THREE.Mesh;
    zip_string: THREE.Mesh;
    Cube: THREE.Mesh;
  };
  materials: {
    ["green metal"]: THREE.MeshStandardMaterial;
    ["green metal.001"]: THREE.MeshStandardMaterial;
    ["zip fabric"]: THREE.MeshStandardMaterial;
    ["black plastic"]: THREE.MeshStandardMaterial;
  };
};

export function Zipv2(props: any) {
  const { nodes, materials } = useGLTF(
    "/models/Zipv2-transformed.glb"
  ) as GLTFResult;

  const {
    staticScale,
    hoverScale,
    initialPosition,
    handleHideLanding,
    thresholdX,
  } = props;

  const [movingPosition, setMovingPosition] =
    useState<number[]>(initialPosition);

  const [startingPosition, setStartingPosition] =
    useState<number[]>(initialPosition);

  useEffect(() => {
    // Add an event listener for beforeunload

    setMovingPosition(initialPosition);
    setStartingPosition(initialPosition);
  }, []);

  // useEffect(() => {
  //   const position1FromStorage = JSON.parse(
  //     localStorage.getItem("movingPosition") ?? ""
  //   );
  //   setStartingPosition(
  //     position1FromStorage === "" ? initialPosition : position1FromStorage
  //   );
  // }, []);

  const { size, viewport } = useThree();

  const aspect = size.width / viewport.width;

  const [spring, set] = useSpring(() => ({
    scale: staticScale,
    position: movingPosition,
    rotation: [0, 0, 0],
    config: { friction: 15 },
  }));

  const bind = useGesture({
    onDrag: ({ offset: [x] }) => {
      const defaultPosition = startingPosition ? startingPosition : [0, 0, 0];
      const newPosition = [
        defaultPosition[0] + x / aspect,
        defaultPosition[1],
        defaultPosition[2],
      ];

      set({ position: newPosition });
      setMovingPosition(newPosition);

      if (movingPosition) {
        if (movingPosition[0] > thresholdX) {
          handleHideLanding();
        }
        return;
      }
    },
    onHover: ({ hovering }) =>
      set({ scale: hovering ? hoverScale : staticScale }),
  });

  return (
    <animated.group {...props} dispose={null} {...spring} {...bind()}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.zip_base.geometry}
        material={materials["green metal"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.zip_hook.geometry}
        material={materials["green metal.001"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.zip_string.geometry}
        material={materials["zip fabric"]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={materials["black plastic"]}
        />
      </mesh>
    </animated.group>
  );
}

useGLTF.preload("/models/Zipv2-transformed.glb");
