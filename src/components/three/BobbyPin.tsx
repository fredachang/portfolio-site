/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 BobbyPin.glb --transform -types
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useRef } from "react";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    BezierCurve: THREE.Mesh;
    BezierCurve001: THREE.Mesh;
  };
  materials: {
    metal: THREE.MeshStandardMaterial;
  };
};

export function BobbyPin(props: any) {
  const { nodes, materials } = useGLTF(
    "/models/BobbyPin-transformed.glb"
  ) as GLTFResult;

  const bobbypin = useRef<THREE.Object3D>(null!);

  const initialPosition = useRef<THREE.Vector3 | null>(null);

  useFrame(({ clock }) => {
    const elapsedTime = clock.getElapsedTime();

    // Floating Animation
    const floatingAmplitude = 0.1; // Adjust the amplitude of the floating animation
    const floatingSpeed = 1; // Adjust the speed of the floating animation

    if (!initialPosition.current) {
      // Store the initial position when it's not set
      initialPosition.current = bobbypin.current!.position.clone();
    }

    const yPosition =
      initialPosition.current.y +
      Math.sin(elapsedTime * floatingSpeed) * floatingAmplitude;

    bobbypin.current!.position.setY(yPosition);
  });

  return (
    <group {...props} dispose={null} ref={bobbypin}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BezierCurve001.geometry}
        material={materials.metal}
        scale={0.05}
      />
    </group>
  );
}

useGLTF.preload("/models/BobbyPin-transformed.glb");
